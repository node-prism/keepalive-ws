var S=Object.create;var m=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var A=(s,r)=>{for(var e in r)m(s,e,{get:r[e],enumerable:!0})},y=(s,r,e,t)=>{if(r&&typeof r=="object"||typeof r=="function")for(let n of k(r))!w.call(s,n)&&n!==e&&m(s,n,{get:()=>r[n],enumerable:!(t=u(r,n))||t.enumerable});return s};var I=(s,r,e)=>(e=s!=null?S(C(s)):{},y(r||!s||!s.__esModule?m(e,"default",{value:s,enumerable:!0}):e,s)),M=s=>y(m({},"__esModule",{value:!0}),s);var W={};A(W,{Connection:()=>a,KeepAliveServer:()=>f,WSContext:()=>p});module.exports=M(W);var g=require("ws");var h=s=>{let r=new TextDecoder("utf-8").decode(s);if(!r)return{id:0,command:"",payload:{}};try{let e=JSON.parse(r);return{id:e.id,command:e.command,payload:e.payload}}catch{return{id:0,command:"",payload:{}}}};var b=I(require("events"),1);var l=class{constructor(){this.start=0;this.end=0;this.ms=0}onRequest(){this.start=Date.now()}onResponse(){this.end=Date.now(),this.ms=this.end-this.start}};var v=class{};var a=class extends b.default{constructor(e,t,n){super();this.alive=!0;this.socket=e,this.id=t.headers["sec-websocket-key"],this.remoteAddress=t.socket.remoteAddress,this.connectionOptions=n,this.applyListeners(),this.startIntervals()}startIntervals(){this.latency=new l,this.ping=new v,this.latency.interval=setInterval(()=>{this.alive&&(typeof this.latency.ms=="number"&&this.send({command:"latency",payload:this.latency.ms}),this.latency.onRequest(),this.send({command:"latency:request",payload:{}}))},this.connectionOptions.latencyInterval),this.ping.interval=setInterval(()=>{this.alive||this.emit("close"),this.alive=!1,this.send({command:"ping",payload:{}})},this.connectionOptions.pingInterval)}stopIntervals(){clearInterval(this.latency.interval),clearInterval(this.ping.interval)}applyListeners(){this.socket.on("close",()=>{this.emit("close")}),this.socket.on("message",e=>{let t=h(e);if(t.command==="latency:response"){this.latency.onResponse();return}else if(t.command==="pong"){this.alive=!0;return}this.emit("message",e)})}send(e){this.socket.send(JSON.stringify(e))}};var p=class{constructor(r,e,t){this.wss=r,this.connection=e,this.payload=t}},f=class extends g.WebSocketServer{constructor(e){super({...e});this.connections={};this.remoteAddressToConnections={};this.commands={};this.globalMiddlewares=[];this.middlewares={};this.rooms={};this.serverOptions={...e,pingInterval:e.pingInterval??3e4,latencyInterval:e.latencyInterval??5e3},this.applyListeners()}cleanupConnection(e){e.stopIntervals(),delete this.connections[e.id],this.remoteAddressToConnections[e.remoteAddress]&&(this.remoteAddressToConnections[e.remoteAddress]=this.remoteAddressToConnections[e.remoteAddress].filter(t=>t.id!==e.id)),this.remoteAddressToConnections[e.remoteAddress].length||delete this.remoteAddressToConnections[e.remoteAddress]}applyListeners(){this.on("connection",(e,t)=>{let n=new a(e,t,this.serverOptions);this.connections[n.id]=n,this.remoteAddressToConnections[n.remoteAddress]||(this.remoteAddressToConnections[n.remoteAddress]=[]),this.remoteAddressToConnections[n.remoteAddress].push(n),this.emit("connected",n),n.once("close",()=>{this.cleanupConnection(n),this.emit("close",n),e.readyState===g.WebSocket.OPEN&&e.close(),Object.keys(this.rooms).forEach(o=>{this.rooms[o].delete(n.id)})}),n.on("message",o=>{try{let{id:i,command:d,payload:c}=h(o);this.runCommand(i??0,d,c,n)}catch(i){this.emit("error",i)}})})}broadcast(e,t,n){let o=JSON.stringify({command:e,payload:t});if(n){n.forEach(i=>{i.socket.send(o)});return}Object.values(this.connections).forEach(i=>{i.socket.send(o)})}broadcastRemoteAddress(e,t,n){let o=JSON.stringify({command:t,payload:n});this.remoteAddressToConnections[e.remoteAddress].forEach(i=>{i.socket.send(o)})}broadcastRemoteAddressById(e,t,n){let o=this.connections[e];o&&this.broadcastRemoteAddress(o,t,n)}broadcastRoom(e,t,n){let o=JSON.stringify({command:t,payload:n}),i=this.rooms[e];i&&i.forEach(d=>{let c=this.connections[d];c&&c.socket.send(o)})}broadcastExclude(e,t,n){let o=JSON.stringify({command:t,payload:n});Object.values(this.connections).forEach(i=>{i.id!==e.id&&i.socket.send(o)})}addToRoom(e,t){this.rooms[e]=this.rooms[e]??new Set,this.rooms[e].add(t.id)}removeFromRoom(e,t){this.rooms[e]&&this.rooms[e].delete(t.id)}getRoom(e){let t=this.rooms[e]||new Set;return Array.from(t).map(n=>this.connections[n])}clearRoom(e){this.rooms[e]=new Set}registerCommand(e,t,n=[]){this.commands[e]=t,this.prependMiddlewareToCommand(e,n)}prependMiddlewareToCommand(e,t){t.length&&(this.middlewares[e]=this.middlewares[e]||[],this.middlewares[e]=t.concat(this.middlewares[e]))}appendMiddlewareToCommand(e,t){t.length&&(this.middlewares[e]=this.middlewares[e]||[],this.middlewares[e]=this.middlewares[e].concat(t))}async runCommand(e,t,n,o){let i=new p(this,o,n);try{if(!this.commands[t])throw new Error(`Command [${t}] not found.`);if(this.globalMiddlewares.length)for(let c of this.globalMiddlewares)await c(i);if(this.middlewares[t])for(let c of this.middlewares[t])await c(i);let d=await this.commands[t](i);o.send({id:e,command:t,payload:d})}catch(d){let c={error:d.message??d??"Unknown error"};o.send({id:e,command:t,payload:c})}}};0&&(module.exports={Connection,KeepAliveServer,WSContext});
